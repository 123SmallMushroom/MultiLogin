import groovy.json.JsonOutput
import org.apache.tools.ant.filters.ReplaceTokens

apply from: './constant.gradle'

allprojects {
    apply plugin: "java"
}

subprojects {
    repositories {
        try (def scanner = new Scanner(file.repositories)) {
            while (scanner.hasNextLine()) {
                def line = scanner.nextLine()
                if (line.trim().length() == 0 || (line.charAt(0) as String) == '#') continue
                maven {
                    url line
                }
            }
        }
    }

    dependencies {
        compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.22'
        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.22'

        try (def scanner = new Scanner(file.libraries)) {
            while (scanner.hasNextLine()) {
                def line = scanner.nextLine()
                if (line.trim().length() == 0 || (line.charAt(0) as String) == '#') continue
                def args = line.split("\\s+")
                compileOnly group: args[0], name: args[1], version: args[2]
            }
        }
    }

    processResources {
        setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE)

        def contributors = new HashSet<String>()
        try (def scanner = new Scanner(file.contributors)) {
            while (scanner.hasNextLine()) {
                def line = scanner.nextLine()
                if (line.trim().length() == 0 || (line.charAt(0) as String) == '#') continue
                contributors.add(line)
            }
        }

        def ver;
        def env = System.getProperty("env", "AUTO").toLowerCase()
        if (env == "final") {
            ver = (project.plugin_version as String)
        } else {
            ver = "Build_" + ((System.currentTimeMillis() / 1000) as int)
        }

        filter ReplaceTokens, tokens: [
                "contributors_json": JsonOutput.toJson(contributors),
                "contributors"     : contributors.join(", "),
                "version"          : ver,
                "build_type"       : env,
                "build_timestamp"  : System.currentTimeMillis() as String
        ]
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(11))
        }
    }
}


